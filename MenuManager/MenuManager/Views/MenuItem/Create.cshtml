@model MenuManager.Models.MenuItem

@{
    ViewBag.Title = "Create Menu Item";
}
@section Styles
{
    <link href="@Url.Content("~/Content/bootstrap-multiselect.css")" rel="stylesheet" type="text/css" />
}

<h2>Create Menu Item</h2>
<hr />

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @{
            System.Linq.Expressions.Expression<Func<MenuItem, string>> expr = model => model.Name;
            @HtmlBuilder.TextField(
                @Html.LabelFor(expr, htmlAttributes: new { @class = "control-label col-md-2" }),
                @Html.EditorFor(expr, new { htmlAttributes = new { @class = "form-control length-help" } }),
                @Html.ValidationMessageFor(expr, "", new { @class = "text-danger" }),
                true)
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="input-group">
                    <span class="input-group-addon">$</span>
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control short-field" } })
                </div>
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Menu_ID, "Menu", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("Menu_ID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Menu_ID, "", new { @class = "text-danger" })
            </div>
        </div>

        @{
            System.Linq.Expressions.Expression<Func<MenuItem, int?>> intExpr = model => model.Calories;
            @HtmlBuilder.TextField(
                @Html.LabelFor(intExpr, htmlAttributes: new { @class = "control-label col-md-2" }),
                @Html.EditorFor(intExpr, new { htmlAttributes = new { @class = "form-control" } }),
                @Html.ValidationMessageFor(intExpr, "", new { @class = "text-danger" }))
        }

        <div class="form-group">
            @Html.LabelFor(model => model.Is_Vegetarian, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Is_Vegetarian, new { htmlAttributes = new { @class = "form-control short-field" } })
                @Html.ValidationMessageFor(model => model.Is_Vegetarian, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Is_Vegan, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Is_Vegan, new { htmlAttributes = new { @class = "form-control short-field" } })
                @Html.ValidationMessageFor(model => model.Is_Vegan, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Ingredients, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.ListBox("Ingredients", null, new { @class = "form-control", multiple = "multiple" })
            </div>
        </div>

        @HtmlBuilder.Buttons("Create", ViewBag.CancelUrl)
    </div>
}

<select hidden id="hidden-optgroups"></select>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Scripts/vendor/bootstrap-multiselect.js")
    @Scripts.Render("~/Scripts/length-help.js")
    @Scripts.Render("~/Scripts/ingredients-menu.js")
}
